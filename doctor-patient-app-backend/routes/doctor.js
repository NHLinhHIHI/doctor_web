// routes/doctor.js
const express = require("express");
const { admin, db } = require("../firebase");
const bcrypt = require("bcrypt");
const router = express.Router();
const nodemailer = require("nodemailer");
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'LINH.NH18886@sinhvien.hoasen.edu.vn',
    pass: 'mfzg jvaj lkvn nmoz', // M·∫≠t kh·∫©u ·ª©ng d·ª•ng Gmail (kh√¥ng ph·∫£i m·∫≠t kh·∫©u th∆∞·ªùng)
  }
});
router.post("/send-reminder-email", async (req, res) => {
  const { email, reExamDate,name,html } = req.body;

  if (!email || !reExamDate || !name) {
    return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin." });
  }

  // G·ª≠i mail (gi·∫£ s·ª≠ d√πng nodemailer)
  try {
     const dateObj = new Date(reExamDate);

  // Format l·∫°i th√†nh d·∫°ng YYYY-MM-DD
  const formattedDate = dateObj.toISOString().split('T')[0]; // v√≠ d·ª•: "2025-06-22"
    await transporter.sendMail({
      from: 'LINH.NH18886@sinhvien.hoasen.edu.vn',
      to: email,  
      subject: "Nh·∫Øc l·ªãch kh√°m b·ªánh",
      text: `Xin ch√†o b·∫°n  ${name}, B·∫°n c√≥ l·ªãch t√°i kh√°m v√†o  ${formattedDate}, m·ªçi s·ª± thay ƒë·ªïi vui l√≤ng li√™n h·ªá l·∫°i v·ªõi ch√∫ng t√¥i .`,
      html

    });

    res.json({ success: true });
  } catch (error) {
    console.error("L·ªói g·ª≠i mail:", error);
    res.status(500).json({ success: false, message: "G·ª≠i mail th·∫•t b·∫°i." });
  }
});
router.post("/send-pdf-email", async (req, res) => {
  const { email, name, html } = req.body;

  if (!email || !name || !html) {
    return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin." });
  }

  try {
   

    // T·∫°o file PDF t·ª´ HTML b·∫±ng Puppeteer
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });

    const fileName = `prescription_${Date.now()}.pdf`;
    const filePath = path.join(__dirname, '../pdfs', fileName); // t·∫°o folder "pdfs" s·∫µn

    await page.pdf({ path: filePath, format: 'A4' });
    await browser.close();

    // G·ª≠i email k√®m file PDF


    await transporter.sendMail({
      
      from: 'LINH.NH18886@sinhvien.hoasen.edu.vn',
      to: email,
      subject: "Toa thu·ªëc ƒë√≠nh k√®m",
      text: `Xin ch√†o ${name}, ƒë√¢y l√† toa thu·ªëc t·ª´ B√°c Sƒ© b·∫°n ƒë√£ kh√°m .`,
      attachments: [
        {
          filename: 'ToaThuoc.pdf',
          path: filePath,
        },
      ],
    });
    fs.unlink(filePath, (err) => {
  if (err) console.error('Kh√¥ng th·ªÉ xo√° file PDF:', err);
});


    res.json({ success: true });
  } catch (error) {
    console.error("L·ªói g·ª≠i mail:", error);
    res.status(500).json({ success: false, message: "G·ª≠i mail th·∫•t b·∫°i." });
  }
});
// API t·∫°o doctor m·ªõi
router.post("/create-doctor", async (req, res) => {
  const {
    email,
    password,
    specialty,
    fullName,
    phone,
    address,
    birthDate,
    experience,
    note,
    CCCD,
  } = req.body;

  try {
    // 1. T·∫°o t√†i kho·∫£n Firebase Auth
    const userRecord = await admin.auth().createUser({
      email,
      password,
    });

    const uid = userRecord.uid;
    const hashedPassword = await bcrypt.hash(password, 10);

    // 2. L∆∞u th√¥ng tin v√†o Firestore
    await db.collection("users").doc(uid).set({
      email: email,
      password: hashedPassword,
      name: fullName,
      role: "doctor",
      phone,
      address,
      birthDate,
      specialty,
      experience,
      note,
      CCCD,
      createdAt: new Date(),
    });
    const mailOptions = {
      from: 'LINH.NH18886@sinhvien.hoasen.edu.vn',
      to: email,
      subject: "T√†i kho·∫£n b√°c sƒ© ƒë√£ ƒë∆∞·ª£c t·∫°o",
      text: `Xin ch√†o ${fullName},\n\nT√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:\n\nüìß Email: ${email}\nüîê M·∫≠t kh·∫©u: ${password}\n\nVui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u sau l·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n.\n\nTr√¢n tr·ªçng,\nPh√≤ng kh√°m`
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.error("G·ª≠i email th·∫•t b·∫°i:", error);
      } else {
        console.log("Email ƒë√£ g·ª≠i:", info.response);
      }});

    res.json({ success: true, message: "Doctor created", uid });
  } catch (error) {
    console.error("Error creating doctor:", error);
    res.status(500).json({ success: false, message: error.message });
  }
});
// L·∫•y th√¥ng tin profile doctor t·ª´ email
router.get("/profile", async (req, res) => {
  const { email } = req.query;

  if (!email) {
    return res.status(400).json({ error: "Email is required" });
  }

  try {
    const snapshot = await db.collection("users").where("email", "==", email).get();

    if (snapshot.empty) {
      return res.status(404).json({ error: "Doctor not found" });
    }

    const doctorDoc = snapshot.docs[0];
    const doctorData = doctorDoc.data();

    res.json({
      id: doctorDoc.id,
      ...doctorData,
    });
  } catch (error) {
    console.error("Error getting doctor profile:", error);
    res.status(500).json({ error: "Failed to fetch doctor profile" });
  }
});
router.put("/update/:email", async (req, res) => {
  const { email } = req.params;
  const updates = req.body;

  try {
    const snapshot = await db.collection("users").where("email", "==", email).get();

    if (snapshot.empty) {
      return res.status(404).json({ message: "Doctor not found" });
    }

    const docId = snapshot.docs[0].id;
    await db.collection("users").doc(docId).update(updates);

    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t th√¥ng tin" });
  }
});
// 4. ƒê·ªïi m·∫≠t kh·∫©u - c·∫≠p nh·∫≠t c·∫£ Auth v√† Firestore
router.post("/change-password", async (req, res) => {
  const { email, password, newPassword } = req.body;

  try {
    const snapshot = await db.collection("users").where("email", "==", email).get();

    if (snapshot.empty) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const userDoc = snapshot.docs[0];
    const userData = userDoc.data();

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isMatch = await bcrypt.compare(password, userData.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u c≈©" });
    }

    const hashedNew = await bcrypt.hash(newPassword, 10);

    // ‚úÖ 1. C·∫≠p nh·∫≠t Auth
    const user = await admin.auth().getUserByEmail(email);
    await admin.auth().updateUser(user.uid, {
      password: newPassword,
    });

    // ‚úÖ 2. C·∫≠p nh·∫≠t Firestore
    await db.collection("users").doc(userDoc.id).update({ password: hashedNew });

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u" });
  }
});


module.exports = router;
